// -------------------------------------------------------------
// 
// File Name: C:\Users\alper\MATLAB\Projects\MatlabHDL_try\codegen\mlhdlc_lpfir\hdlsrc\mlhdlc_lpfir_fixpt_tb.v
// Created: 2021-05-26 21:56:40
// 
// Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_out                         ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mlhdlc_lpfir_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mlhdlc_lpfir_fixpt_tb
          (clk,
           reset,
           enb);


  input   clk;
  input   reset;
  input   enb;


  wire signed [13:0] holdData_x_in;  // sfix14_En12
  wire resetn;
  wire [13:0] holdData_h1;  // ufix14_En18
  wire [13:0] h1_1;  // ufix14_En18
  wire [13:0] holdData_h2;  // ufix14_En17
  wire [13:0] h2_1;  // ufix14_En17
  wire signed [13:0] holdData_h3;  // sfix14_En17
  wire signed [13:0] h3_1;  // sfix14_En17
  wire signed [13:0] holdData_h4;  // sfix14_En16
  wire signed [13:0] h4_1;  // sfix14_En16
  wire [13:0] holdData_h5;  // ufix14_En16
  wire [13:0] h5_1;  // ufix14_En16
  wire [13:0] holdData_h6;  // ufix14_En15
  wire [13:0] h6_1;  // ufix14_En15
  wire [13:0] holdData_h7;  // ufix14_En15
  wire [13:0] h7_1;  // ufix14_En15
  wire [13:0] holdData_h8;  // ufix14_En16
  wire [13:0] h8_1;  // ufix14_En16
  wire signed [13:0] holdData_h9;  // sfix14_En16
  wire signed [13:0] h9_1;  // sfix14_En16
  wire signed [13:0] holdData_h10;  // sfix14_En17
  wire signed [13:0] h10_1;  // sfix14_En17
  wire [13:0] holdData_h11;  // ufix14_En17
  wire [13:0] h11_1;  // ufix14_En17
  wire [13:0] holdData_h12;  // ufix14_En18
  wire [13:0] h12_1;  // ufix14_En18
  wire y_out_done;  // ufix1
  wire rdEnb;
  wire y_out_done_enb;  // ufix1
  reg [9:0] y_out_addr;  // ufix10
  wire y_out_active;  // ufix1
  reg [13:0] h12_offset;  // ufix14_En18
  wire [13:0] h12_2;  // ufix14_En18
  reg [13:0] h11_offset;  // ufix14_En17
  wire [13:0] h11_2;  // ufix14_En17
  reg signed [13:0] h10_offset;  // sfix14_En17
  wire signed [13:0] h10_2;  // sfix14_En17
  reg signed [13:0] h9_offset;  // sfix14_En16
  wire signed [13:0] h9_2;  // sfix14_En16
  reg [13:0] h8_offset;  // ufix14_En16
  wire [13:0] h8_2;  // ufix14_En16
  reg [13:0] h7_offset;  // ufix14_En15
  wire [13:0] h7_2;  // ufix14_En15
  reg [13:0] h6_offset;  // ufix14_En15
  wire [13:0] h6_2;  // ufix14_En15
  reg [13:0] h5_offset;  // ufix14_En16
  wire [13:0] h5_2;  // ufix14_En16
  reg signed [13:0] h4_offset;  // sfix14_En16
  wire signed [13:0] h4_2;  // sfix14_En16
  reg signed [13:0] h3_offset;  // sfix14_En17
  wire signed [13:0] h3_2;  // sfix14_En17
  reg [13:0] h2_offset;  // ufix14_En17
  wire [13:0] h2_2;  // ufix14_En17
  reg [13:0] h1_offset;  // ufix14_En18
  wire [13:0] h1_2;  // ufix14_En18
  reg [9:0] x_in_addr;  // ufix10
  wire x_in_active;  // ufix1
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire tb_enb;
  wire x_in_enb;  // ufix1
  wire [9:0] x_in_addr_delay_1;  // ufix10
  reg signed [31:0] fp_x_in;  // sfix32
  reg signed [13:0] x_in_1;  // sfix14_En12
  reg signed [31:0] status_x_in;  // sfix32
  reg signed [13:0] x_in_offset;  // sfix14_En12
  wire signed [13:0] x_in_2;  // sfix14_En12
  wire ce_out;
  wire signed [13:0] y_out;  // sfix14_En12
  wire y_out_enb;  // ufix1
  wire y_out_lastAddr;  // ufix1
  wire [9:0] y_out_addr_delay_1;  // ufix10
  reg signed [31:0] fp_y_out_expected;  // sfix32
  reg signed [13:0] y_out_expected;  // sfix14_En12
  reg signed [31:0] status_y_out_expected;  // sfix32
  wire signed [13:0] y_out_ref;  // sfix14_En12
  reg  y_out_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign holdData_x_in = 14'bx;


  assign resetn =  ~ reset;



  assign holdData_h1 = 14'bx;


  // Data source for h1
  assign h1_1 = 14'b10000000001101;



  assign holdData_h2 = 14'bx;


  // Data source for h2
  assign h2_1 = 14'b10000000000000;



  assign holdData_h3 = 14'bx;


  // Data source for h3
  assign h3_1 = 14'sb10000000000000;



  assign holdData_h4 = 14'bx;


  // Data source for h4
  assign h4_1 = 14'sb10011111111100;



  assign holdData_h5 = 14'bx;


  // Data source for h5
  assign h5_1 = 14'b10100000000011;



  assign holdData_h6 = 14'bx;


  // Data source for h6
  assign h6_1 = 14'b11100000000000;



  assign holdData_h7 = 14'bx;


  // Data source for h7
  assign h7_1 = 14'b11100000000000;



  assign holdData_h8 = 14'bx;


  // Data source for h8
  assign h8_1 = 14'b10100000000011;



  assign holdData_h9 = 14'bx;


  // Data source for h9
  assign h9_1 = 14'sb10011111111100;



  assign holdData_h10 = 14'bx;


  // Data source for h10
  assign h10_1 = 14'sb10000000000000;



  assign holdData_h11 = 14'bx;


  // Data source for h11
  assign h11_1 = 14'b10000000000000;



  assign holdData_h12 = 14'bx;


  // Data source for h12
  assign h12_1 = 14'b10000000001101;



  assign y_out_done_enb = y_out_done & rdEnb;



  assign y_out_active = y_out_addr != 10'b1111100111;



  always @(h12_1 or rdEnb)
    begin : stimuli_h12
      if (rdEnb == 1'b0) begin
        h12_offset <= holdData_h12;
      end
      else begin
        h12_offset <= h12_1;
      end
    end

  assign #0 h12_2 = h12_offset;

  always @(h11_1 or rdEnb)
    begin : stimuli_h11
      if (rdEnb == 1'b0) begin
        h11_offset <= holdData_h11;
      end
      else begin
        h11_offset <= h11_1;
      end
    end

  assign #0 h11_2 = h11_offset;

  always @(h10_1 or rdEnb)
    begin : stimuli_h10
      if (rdEnb == 1'b0) begin
        h10_offset <= holdData_h10;
      end
      else begin
        h10_offset <= h10_1;
      end
    end

  assign #0 h10_2 = h10_offset;

  always @(h9_1 or rdEnb)
    begin : stimuli_h9
      if (rdEnb == 1'b0) begin
        h9_offset <= holdData_h9;
      end
      else begin
        h9_offset <= h9_1;
      end
    end

  assign #0 h9_2 = h9_offset;

  always @(h8_1 or rdEnb)
    begin : stimuli_h8
      if (rdEnb == 1'b0) begin
        h8_offset <= holdData_h8;
      end
      else begin
        h8_offset <= h8_1;
      end
    end

  assign #0 h8_2 = h8_offset;

  always @(h7_1 or rdEnb)
    begin : stimuli_h7
      if (rdEnb == 1'b0) begin
        h7_offset <= holdData_h7;
      end
      else begin
        h7_offset <= h7_1;
      end
    end

  assign #0 h7_2 = h7_offset;

  always @(h6_1 or rdEnb)
    begin : stimuli_h6
      if (rdEnb == 1'b0) begin
        h6_offset <= holdData_h6;
      end
      else begin
        h6_offset <= h6_1;
      end
    end

  assign #0 h6_2 = h6_offset;

  always @(h5_1 or rdEnb)
    begin : stimuli_h5
      if (rdEnb == 1'b0) begin
        h5_offset <= holdData_h5;
      end
      else begin
        h5_offset <= h5_1;
      end
    end

  assign #0 h5_2 = h5_offset;

  always @(h4_1 or rdEnb)
    begin : stimuli_h4
      if (rdEnb == 1'b0) begin
        h4_offset <= holdData_h4;
      end
      else begin
        h4_offset <= h4_1;
      end
    end

  assign #0 h4_2 = h4_offset;

  always @(h3_1 or rdEnb)
    begin : stimuli_h3
      if (rdEnb == 1'b0) begin
        h3_offset <= holdData_h3;
      end
      else begin
        h3_offset <= h3_1;
      end
    end

  assign #0 h3_2 = h3_offset;

  always @(h2_1 or rdEnb)
    begin : stimuli_h2
      if (rdEnb == 1'b0) begin
        h2_offset <= holdData_h2;
      end
      else begin
        h2_offset <= h2_1;
      end
    end

  assign #0 h2_2 = h2_offset;

  always @(h1_1 or rdEnb)
    begin : stimuli_h1
      if (rdEnb == 1'b0) begin
        h1_offset <= holdData_h1;
      end
      else begin
        h1_offset <= h1_1;
      end
    end

  assign #0 h1_2 = h1_offset;

  assign x_in_active = x_in_addr != 10'b1111100111;



  assign snkDonen =  ~ check1_done;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (check1_done == 1'b0 ? tb_enb :
              1'b0);



  assign x_in_enb = x_in_active & (rdEnb & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 999
  always @(posedge clk or posedge reset)
    begin : x_in_process
      if (reset == 1'b1) begin
        x_in_addr <= 10'b0000000000;
      end
      else begin
        if (x_in_enb) begin
          if (x_in_addr >= 10'b1111100111) begin
            x_in_addr <= 10'b0000000000;
          end
          else begin
            x_in_addr <= x_in_addr + 10'b0000000001;
          end
        end
      end
    end



  assign #1 x_in_addr_delay_1 = x_in_addr;

  // Data source for x_in
  initial
    begin : x_in_fileread
      fp_x_in = $fopen("x_in.dat", "r");
      status_x_in = $rewind(fp_x_in);
    end

  always @(x_in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        x_in_1 <= 14'bx;
      end
      else if (rdEnb == 1) begin
        status_x_in = $fscanf(fp_x_in, "%h", x_in_1);
      end
    end

  always @(x_in_1 or rdEnb)
    begin : stimuli_x_in
      if (rdEnb == 1'b0) begin
        x_in_offset <= holdData_x_in;
      end
      else begin
        x_in_offset <= x_in_1;
      end
    end

  assign #0 x_in_2 = x_in_offset;

  mlhdlc_lpfir_fixpt u_mlhdlc_lpfir_fixpt (.clk(clk),
                                           .reset(reset),
                                           .clk_enable(enb),
                                           .x_in(x_in_2),  // sfix14_En12
                                           .h1(h1_2),  // ufix14_En18
                                           .h2(h2_2),  // ufix14_En17
                                           .h3(h3_2),  // sfix14_En17
                                           .h4(h4_2),  // sfix14_En16
                                           .h5(h5_2),  // ufix14_En16
                                           .h6(h6_2),  // ufix14_En15
                                           .h7(h7_2),  // ufix14_En15
                                           .h8(h8_2),  // ufix14_En16
                                           .h9(h9_2),  // sfix14_En16
                                           .h10(h10_2),  // sfix14_En17
                                           .h11(h11_2),  // ufix14_En17
                                           .h12(h12_2),  // ufix14_En18
                                           .ce_out(ce_out),
                                           .y_out(y_out)  // sfix14_En12
                                           );

  assign y_out_enb = ce_out & y_out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 999
  always @(posedge clk or posedge reset)
    begin : y_out_1_process
      if (reset == 1'b1) begin
        y_out_addr <= 10'b0000000000;
      end
      else begin
        if (y_out_enb) begin
          if (y_out_addr >= 10'b1111100111) begin
            y_out_addr <= 10'b0000000000;
          end
          else begin
            y_out_addr <= y_out_addr + 10'b0000000001;
          end
        end
      end
    end



  assign y_out_lastAddr = y_out_addr >= 10'b1111100111;



  assign y_out_done = y_out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (y_out_done_enb) begin
          check1_done <= y_out_done;
        end
      end
    end

  assign #1 y_out_addr_delay_1 = y_out_addr;

  // Data source for y_out_expected
  initial
    begin : y_out_expected_fileread
      fp_y_out_expected = $fopen("y_out_expected.dat", "r");
      status_y_out_expected = $rewind(fp_y_out_expected);
    end

  always @(y_out_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        y_out_expected <= 14'bx;
      end
      else if (ce_out == 1) begin
        status_y_out_expected = $fscanf(fp_y_out_expected, "%h", y_out_expected);
      end
    end

  assign y_out_ref = y_out_expected;

  always @(posedge clk or posedge reset)
    begin : y_out_checker
      if (reset == 1'b1) begin
        y_out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y_out !== y_out_ref) begin
          y_out_testFailure <= 1'b1;
          $display("ERROR in y_out at time %t : Expected '%h' Actual '%h'", $time, y_out_ref, y_out);
        end
      end
    end

  assign testFailure = y_out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // mlhdlc_lpfir_fixpt_tb

