// -------------------------------------------------------------
// 
// File Name: C:\Users\alper\MATLAB\Projects\MatlabHDL_try\codegen\mlhdlc_lpfir\hdlsrc\mlhdlc_lpfir_fixpt.v
// Created: 2021-05-26 21:56:13
// 
// Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_out                         ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mlhdlc_lpfir_fixpt
// Source Path: mlhdlc_lpfir_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mlhdlc_lpfir_fixpt
          (clk,
           reset,
           clk_enable,
           x_in,
           h1,
           h2,
           h3,
           h4,
           h5,
           h6,
           h7,
           h8,
           h9,
           h10,
           h11,
           h12,
           ce_out,
           y_out);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x_in;  // sfix14_En12
  input   [13:0] h1;  // ufix14_En18
  input   [13:0] h2;  // ufix14_En17
  input   signed [13:0] h3;  // sfix14_En17
  input   signed [13:0] h4;  // sfix14_En16
  input   [13:0] h5;  // ufix14_En16
  input   [13:0] h6;  // ufix14_En15
  input   [13:0] h7;  // ufix14_En15
  input   [13:0] h8;  // ufix14_En16
  input   signed [13:0] h9;  // sfix14_En16
  input   signed [13:0] h10;  // sfix14_En17
  input   [13:0] h11;  // ufix14_En17
  input   [13:0] h12;  // ufix14_En18
  output  ce_out;
  output  signed [13:0] y_out;  // sfix14_En12


  wire enb;
  reg signed [13:0] ud1;  // sfix14_En12
  wire signed [13:0] m1;  // sfix14_En17
  wire signed [14:0] p36m1_cast;  // sfix15_En18
  wire signed [28:0] p36m1_mul_temp;  // sfix29_En30
  wire signed [27:0] p36m1_cast_1;  // sfix28_En30
  reg signed [13:0] ud2;  // sfix14_En12
  wire signed [13:0] m2;  // sfix14_En16
  wire signed [14:0] p37m2_cast;  // sfix15_En17
  wire signed [28:0] p37m2_mul_temp;  // sfix29_En29
  wire signed [27:0] p37m2_cast_1;  // sfix28_En29
  wire signed [13:0] aa1;  // sfix14_En16
  wire signed [15:0] p48aa1_add_cast;  // sfix16_En17
  wire signed [15:0] p48aa1_add_cast_1;  // sfix16_En17
  wire signed [15:0] p48aa1_add_temp;  // sfix16_En17
  reg signed [13:0] ud3;  // sfix14_En12
  wire signed [13:0] m3;  // sfix14_En16
  wire signed [27:0] p38m3_mul_temp;  // sfix28_En29
  wire signed [13:0] aa2;  // sfix14_En15
  wire signed [14:0] p49aa2_add_cast;  // sfix15_En16
  wire signed [14:0] p49aa2_add_cast_1;  // sfix15_En16
  wire signed [14:0] p49aa2_add_temp;  // sfix15_En16
  reg signed [13:0] ud4;  // sfix14_En12
  wire signed [13:0] m4;  // sfix14_En16
  wire signed [27:0] p39m4_mul_temp;  // sfix28_En28
  wire signed [13:0] aa3;  // sfix14_En15
  wire signed [15:0] p50aa3_add_cast;  // sfix16_En16
  wire signed [15:0] p50aa3_add_cast_1;  // sfix16_En16
  wire signed [15:0] p50aa3_add_temp;  // sfix16_En16
  reg signed [13:0] ud5;  // sfix14_En12
  wire signed [13:0] m5;  // sfix14_En15
  wire signed [14:0] p40m5_cast;  // sfix15_En16
  wire signed [28:0] p40m5_mul_temp;  // sfix29_En28
  wire signed [27:0] p40m5_cast_1;  // sfix28_En28
  wire signed [13:0] aa4;  // sfix14_En14
  wire signed [14:0] p51aa4_add_cast;  // sfix15_En15
  wire signed [14:0] p51aa4_add_cast_1;  // sfix15_En15
  wire signed [14:0] p51aa4_add_temp;  // sfix15_En15
  reg signed [13:0] ud6;  // sfix14_En12
  wire signed [13:0] m6;  // sfix14_En14
  wire signed [14:0] p41m6_cast;  // sfix15_En15
  wire signed [28:0] p41m6_mul_temp;  // sfix29_En27
  wire signed [27:0] p41m6_cast_1;  // sfix28_En27
  wire signed [13:0] aa5;  // sfix14_En13
  wire signed [14:0] p52aa5_add_cast;  // sfix15_En14
  wire signed [14:0] p52aa5_add_cast_1;  // sfix15_En14
  wire signed [14:0] p52aa5_add_temp;  // sfix15_En14
  reg signed [13:0] ud7;  // sfix14_En12
  wire signed [13:0] m7;  // sfix14_En14
  wire signed [14:0] p42m7_cast;  // sfix15_En15
  wire signed [28:0] p42m7_mul_temp;  // sfix29_En27
  wire signed [27:0] p42m7_cast_1;  // sfix28_En27
  wire signed [13:0] aa6;  // sfix14_En12
  wire signed [15:0] p53aa6_add_cast;  // sfix16_En14
  wire signed [15:0] p53aa6_add_cast_1;  // sfix16_En14
  wire signed [15:0] p53aa6_add_temp;  // sfix16_En14
  reg signed [13:0] ud8;  // sfix14_En12
  wire signed [13:0] m8;  // sfix14_En15
  wire signed [14:0] p43m8_cast;  // sfix15_En16
  wire signed [28:0] p43m8_mul_temp;  // sfix29_En28
  wire signed [27:0] p43m8_cast_1;  // sfix28_En28
  wire signed [13:0] aa7;  // sfix14_En12
  wire signed [17:0] p54aa7_add_cast;  // sfix18_En15
  wire signed [17:0] p54aa7_add_cast_1;  // sfix18_En15
  wire signed [17:0] p54aa7_add_temp;  // sfix18_En15
  reg signed [13:0] ud9;  // sfix14_En12
  wire signed [13:0] m9;  // sfix14_En16
  wire signed [27:0] p44m9_mul_temp;  // sfix28_En28
  wire signed [13:0] aa8;  // sfix14_En12
  wire signed [18:0] p55aa8_add_cast;  // sfix19_En16
  wire signed [18:0] p55aa8_add_cast_1;  // sfix19_En16
  wire signed [18:0] p55aa8_add_temp;  // sfix19_En16
  reg signed [13:0] ud10;  // sfix14_En12
  wire signed [13:0] m10;  // sfix14_En16
  wire signed [27:0] p45m10_mul_temp;  // sfix28_En29
  wire signed [13:0] aa9;  // sfix14_En12
  wire signed [18:0] p56aa9_add_cast;  // sfix19_En16
  wire signed [18:0] p56aa9_add_cast_1;  // sfix19_En16
  wire signed [18:0] p56aa9_add_temp;  // sfix19_En16
  reg signed [13:0] ud11;  // sfix14_En12
  wire signed [13:0] m11;  // sfix14_En16
  wire signed [14:0] p46m11_cast;  // sfix15_En17
  wire signed [28:0] p46m11_mul_temp;  // sfix29_En29
  wire signed [27:0] p46m11_cast_1;  // sfix28_En29
  wire signed [13:0] aa10;  // sfix14_En12
  wire signed [18:0] p57aa10_add_cast;  // sfix19_En16
  wire signed [18:0] p57aa10_add_cast_1;  // sfix19_En16
  wire signed [18:0] p57aa10_add_temp;  // sfix19_En16
  reg signed [13:0] ud12;  // sfix14_En12
  wire signed [13:0] m12;  // sfix14_En17
  wire signed [14:0] p47m12_cast;  // sfix15_En18
  wire signed [28:0] p47m12_mul_temp;  // sfix29_En30
  wire signed [27:0] p47m12_cast_1;  // sfix28_En30
  wire signed [19:0] p58y_out_add_cast;  // sfix20_En17
  wire signed [19:0] p58y_out_add_cast_1;  // sfix20_En17
  wire signed [19:0] p58y_out_add_temp;  // sfix20_En17


  assign enb = clk_enable;

  // HDL code generation from MATLAB function: mlhdlc_lpfir_fixpt
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  //                                                                          %
  // 
  //           Generated by MATLAB 9.9 and Fixed-Point Designer 7.1           %
  // 
  //                                                                          %
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  // h1 = 0.0313 ;
  // 
  // h2 = 0.0625 ;
  // 
  // h3 = -0.0625 ;
  // 
  // h4 = -0.0938 ;
  // 
  // h5 = 0.1563 ;
  // 
  // h6 = 0.4375 ;
  // 
  // h7 = 0.4375 ;
  // 
  // h8 = 0.1563 ;
  // 
  // h9 = -0.0938 ;
  // 
  // h10 = -0.0625 ;
  // 
  // h11 = 0.0625 ;
  // 
  // h12 = 0.0313 ;
  // 
  // Low-pass FIR Filter
  // 
  // declare and initialize the delay registers
  // 
  // access the previous value of states/registers
  always @(posedge clk or posedge reset)
    begin : ud1_reg_process
      if (reset == 1'b1) begin
        ud1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud1 <= x_in;
        end
      end
    end



  // multiplier chain
  assign p36m1_cast = {1'b0, h1};
  assign p36m1_mul_temp = p36m1_cast * ud1;
  assign p36m1_cast_1 = p36m1_mul_temp[27:0];
  assign m1 = p36m1_cast_1[26:13];



  always @(posedge clk or posedge reset)
    begin : ud2_reg_process
      if (reset == 1'b1) begin
        ud2 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud2 <= ud1;
        end
      end
    end



  assign p37m2_cast = {1'b0, h2};
  assign p37m2_mul_temp = p37m2_cast * ud2;
  assign p37m2_cast_1 = p37m2_mul_temp[27:0];
  assign m2 = p37m2_cast_1[26:13];



  // adder chain
  assign p48aa1_add_cast = {{2{m1[13]}}, m1};
  assign p48aa1_add_cast_1 = {m2[13], {m2, 1'b0}};
  assign p48aa1_add_temp = p48aa1_add_cast + p48aa1_add_cast_1;
  assign aa1 = p48aa1_add_temp[14:1];



  always @(posedge clk or posedge reset)
    begin : ud3_reg_process
      if (reset == 1'b1) begin
        ud3 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud3 <= ud2;
        end
      end
    end



  assign p38m3_mul_temp = h3 * ud3;
  assign m3 = p38m3_mul_temp[26:13];



  assign p49aa2_add_cast = {aa1[13], aa1};
  assign p49aa2_add_cast_1 = {m3[13], m3};
  assign p49aa2_add_temp = p49aa2_add_cast + p49aa2_add_cast_1;
  assign aa2 = p49aa2_add_temp[14:1];



  always @(posedge clk or posedge reset)
    begin : ud4_reg_process
      if (reset == 1'b1) begin
        ud4 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud4 <= ud3;
        end
      end
    end



  assign p39m4_mul_temp = h4 * ud4;
  assign m4 = p39m4_mul_temp[25:12];



  assign p50aa3_add_cast = {aa2[13], {aa2, 1'b0}};
  assign p50aa3_add_cast_1 = {{2{m4[13]}}, m4};
  assign p50aa3_add_temp = p50aa3_add_cast + p50aa3_add_cast_1;
  assign aa3 = p50aa3_add_temp[14:1];



  always @(posedge clk or posedge reset)
    begin : ud5_reg_process
      if (reset == 1'b1) begin
        ud5 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud5 <= ud4;
        end
      end
    end



  assign p40m5_cast = {1'b0, h5};
  assign p40m5_mul_temp = p40m5_cast * ud5;
  assign p40m5_cast_1 = p40m5_mul_temp[27:0];
  assign m5 = p40m5_cast_1[26:13];



  assign p51aa4_add_cast = {aa3[13], aa3};
  assign p51aa4_add_cast_1 = {m5[13], m5};
  assign p51aa4_add_temp = p51aa4_add_cast + p51aa4_add_cast_1;
  assign aa4 = p51aa4_add_temp[14:1];



  always @(posedge clk or posedge reset)
    begin : ud6_reg_process
      if (reset == 1'b1) begin
        ud6 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud6 <= ud5;
        end
      end
    end



  assign p41m6_cast = {1'b0, h6};
  assign p41m6_mul_temp = p41m6_cast * ud6;
  assign p41m6_cast_1 = p41m6_mul_temp[27:0];
  assign m6 = p41m6_cast_1[26:13];



  assign p52aa5_add_cast = {aa4[13], aa4};
  assign p52aa5_add_cast_1 = {m6[13], m6};
  assign p52aa5_add_temp = p52aa5_add_cast + p52aa5_add_cast_1;
  assign aa5 = p52aa5_add_temp[14:1];



  always @(posedge clk or posedge reset)
    begin : ud7_reg_process
      if (reset == 1'b1) begin
        ud7 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud7 <= ud6;
        end
      end
    end



  assign p42m7_cast = {1'b0, h7};
  assign p42m7_mul_temp = p42m7_cast * ud7;
  assign p42m7_cast_1 = p42m7_mul_temp[27:0];
  assign m7 = p42m7_cast_1[26:13];



  assign p53aa6_add_cast = {aa5[13], {aa5, 1'b0}};
  assign p53aa6_add_cast_1 = {{2{m7[13]}}, m7};
  assign p53aa6_add_temp = p53aa6_add_cast + p53aa6_add_cast_1;
  assign aa6 = p53aa6_add_temp[15:2];



  always @(posedge clk or posedge reset)
    begin : ud8_reg_process
      if (reset == 1'b1) begin
        ud8 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud8 <= ud7;
        end
      end
    end



  assign p43m8_cast = {1'b0, h8};
  assign p43m8_mul_temp = p43m8_cast * ud8;
  assign p43m8_cast_1 = p43m8_mul_temp[27:0];
  assign m8 = p43m8_cast_1[26:13];



  assign p54aa7_add_cast = {aa6[13], {aa6, 3'b000}};
  assign p54aa7_add_cast_1 = {{4{m8[13]}}, m8};
  assign p54aa7_add_temp = p54aa7_add_cast + p54aa7_add_cast_1;
  assign aa7 = p54aa7_add_temp[16:3];



  always @(posedge clk or posedge reset)
    begin : ud9_reg_process
      if (reset == 1'b1) begin
        ud9 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud9 <= ud8;
        end
      end
    end



  assign p44m9_mul_temp = h9 * ud9;
  assign m9 = p44m9_mul_temp[25:12];



  assign p55aa8_add_cast = {aa7[13], {aa7, 4'b0000}};
  assign p55aa8_add_cast_1 = {{5{m9[13]}}, m9};
  assign p55aa8_add_temp = p55aa8_add_cast + p55aa8_add_cast_1;
  assign aa8 = p55aa8_add_temp[17:4];



  always @(posedge clk or posedge reset)
    begin : ud10_reg_process
      if (reset == 1'b1) begin
        ud10 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud10 <= ud9;
        end
      end
    end



  assign p45m10_mul_temp = h10 * ud10;
  assign m10 = p45m10_mul_temp[26:13];



  assign p56aa9_add_cast = {aa8[13], {aa8, 4'b0000}};
  assign p56aa9_add_cast_1 = {{5{m10[13]}}, m10};
  assign p56aa9_add_temp = p56aa9_add_cast + p56aa9_add_cast_1;
  assign aa9 = p56aa9_add_temp[17:4];



  // update the delay line
  always @(posedge clk or posedge reset)
    begin : ud11_reg_process
      if (reset == 1'b1) begin
        ud11 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud11 <= ud10;
        end
      end
    end



  assign p46m11_cast = {1'b0, h11};
  assign p46m11_mul_temp = p46m11_cast * ud11;
  assign p46m11_cast_1 = p46m11_mul_temp[27:0];
  assign m11 = p46m11_cast_1[26:13];



  assign p57aa10_add_cast = {aa9[13], {aa9, 4'b0000}};
  assign p57aa10_add_cast_1 = {{5{m11[13]}}, m11};
  assign p57aa10_add_temp = p57aa10_add_cast + p57aa10_add_cast_1;
  assign aa10 = p57aa10_add_temp[17:4];



  always @(posedge clk or posedge reset)
    begin : ud12_reg_process
      if (reset == 1'b1) begin
        ud12 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          ud12 <= ud11;
        end
      end
    end



  assign p47m12_cast = {1'b0, h12};
  assign p47m12_mul_temp = p47m12_cast * ud12;
  assign p47m12_cast_1 = p47m12_mul_temp[27:0];
  assign m12 = p47m12_cast_1[26:13];



  // filtered output
  assign p58y_out_add_cast = {aa10[13], {aa10, 5'b00000}};
  assign p58y_out_add_cast_1 = {{6{m12[13]}}, m12};
  assign p58y_out_add_temp = p58y_out_add_cast + p58y_out_add_cast_1;
  assign y_out = p58y_out_add_temp[18:5];



  assign ce_out = clk_enable;

endmodule  // mlhdlc_lpfir_fixpt

